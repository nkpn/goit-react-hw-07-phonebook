{"version":3,"sources":["components/SubmitForm/SubmitForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts-actions.js","redux/contacts-reducer.js","redux/contacts-store.js","helpers/Toast.js","components/Container/Container.js","redux/contacts-selector.js","redux/contacts-operations.js","components/SubmitForm/SubmitForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","index.js"],"names":["module","exports","changeFilter","createAction","fetchContactRequest","fetchContactSuccess","contactsActions","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","items","createReducer","_","action","payload","state","filter","id","isLoading","error","actions","combineReducers","store","configureStore","reducer","contacts","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistStore","notify","name","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Container","children","className","getContacts","getFilter","getVisibleContacts","createSelector","toLowerCase","includes","axios","defaults","baseURL","contactsOperations","fetchContact","dispatch","a","get","then","response","data","catch","addContact","contact","post","deleteContact","delete","SubmitForm","useState","setName","number","setNumber","setId","uniqeID","shortid","useDispatch","useSelector","handleInputChange","event","target","value","reset","s","Div","Form","onSubmit","preventDefault","find","toLocaleLowerCase","Label","htmlFor","type","Input","pattern","title","required","onChange","Button","ContactList","useEffect","style","Contacts__container","Contact__list","map","Contact__item","onClick","Filter","LabelText","e","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ddd1272.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"SubmitForm_Button__3kdxH\",\"Form\":\"SubmitForm_Form__1b8zQ\",\"Label\":\"SubmitForm_Label__3zkIy\",\"Input\":\"SubmitForm_Input__3BHOV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contacts__container\":\"ContactList_Contacts__container__2O06z\",\"Contact__list\":\"ContactList_Contact__list__3IZrA\",\"Contact__item\":\"ContactList_Contact__item__2JqEf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Filter_Label__3S0qp\",\"LabelText\":\"Filter_LabelText__2oXwa\",\"Input\":\"Filter_Input__SNZyp\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n// import types from './contacts-types';\r\n\r\n//* Через классы\r\n// const AddContact = newContact => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid(),\r\n//     newContact,\r\n//   },\r\n// });\r\n\r\n//* Create Action\r\n// const AddContact = createAction('Contact/addContact', ({ name, number }) => {\r\n//   return {\r\n//     payload: {\r\n//       id: shortid(),\r\n//       number,\r\n//       name,\r\n//     },\r\n//   };\r\n// });\r\n\r\n// const deleteContact = createAction('Contact/deleteContact');\r\n\r\n// const deleteContact = contact => ({\r\n//   type: types.DELETE,\r\n//   payload: contact,\r\n// });\r\n\r\nconst changeFilter = createAction('Contact/changeFilter');\r\n\r\n// const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nconst fetchContactRequest = createAction('Contacts/fetchContactRequest');\r\nconst fetchContactSuccess = createAction('Contacts/fetchContactSuccess');\r\nconst fetchContactError = createAction('Contacts/fetchContactError');\r\n\r\nconst addContactRequest = createAction('Contacts/addContactsRequest');\r\nconst addContactSuccess = createAction('Contacts/addContactsSuccess');\r\nconst addContactError = createAction('Contacts/addContactsError');\r\n\r\nconst deleteContactRequest = createAction('Contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('Contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('Contacts/deleteContactError');\r\n\r\nconst contactsActions = {\r\n  changeFilter,\r\n  fetchContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n};\r\n\r\nexport default contactsActions;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport contactsActions from './contacts-actions';\r\nimport actions from './contacts-actions';\r\n\r\n//* CreateReducer\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchContactSuccess]: (_, action) => action.payload,\r\n\r\n  [contactsActions.addContactSuccess]: (state, action) => [\r\n    ...state,\r\n    action.payload,\r\n  ],\r\n\r\n  [contactsActions.deleteContactSuccess]: (state, action) =>\r\n    state.filter(state => state.id !== action.payload),\r\n});\r\n\r\nconst isLoading = createReducer(false, {\r\n  [contactsActions.fetchContactRequest]: () => true,\r\n  [contactsActions.fetchContactSuccess]: () => false,\r\n  [contactsActions.fetchContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [contactsActions.fetchContactError]: (_, action) => action.payload,\r\n  [contactsActions.fetchContactRequest]: (_, action) => null,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  isLoading,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts-reducer';\r\n\r\n//* local storage пока не нужен\r\n// const contactPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    // contacts: persistReducer(contactPersistConfig, contactsReducer),\r\n  },\r\n  // middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\r\n  middleware: [\r\n    ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n    // myMiddleware,\r\n  ],\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst notify = name =>\r\n  toast.error(`${name} is already in contacts!`, {\r\n    position: 'top-right',\r\n    autoClose: 5000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n\r\nexport default notify;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Container.css';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getItems = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getItems, getFilter],\r\n  (items, filter) =>\r\n    items.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase()),\r\n    ),\r\n);\r\n","import contactsActions from './contacts-actions';\r\n// import {\r\n//   APIAddContacts,\r\n//   APIDeleteContacts,\r\n//   APIfetchContacts,\r\n// } from 'service/contacts-API';\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = 'http://localhost:3030';\r\n\r\nconst fetchContact = () => async dispatch => {\r\n  dispatch(contactsActions.fetchContactRequest());\r\n\r\n  // try {\r\n  //   const data = await APIfetchContacts();\r\n  //   dispatch(contactsActions.fetchContactSuccess(data));\r\n  // } catch (error) {\r\n  //   dispatch(contactsActions.fetchContactError(error));\r\n  // }\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(response => {\r\n      return dispatch(contactsActions.fetchContactSuccess(response.data));\r\n    })\r\n    .catch(error => {\r\n      return dispatch(contactsActions.fetchContactError(error));\r\n    });\r\n};\r\n\r\nconst addContact = contact => async dispatch => {\r\n  dispatch(contactsActions.addContactRequest());\r\n  axios\r\n    .post('/contacts/', contact)\r\n    .then(response => {\r\n      return dispatch(contactsActions.addContactSuccess(response.data));\r\n    })\r\n    .catch(error => {\r\n      return dispatch(contactsActions.addContactError(error));\r\n    });\r\n  // try {\r\n  //   const result = await APIAddContacts(data);\r\n  //   dispatch(contactsActions.addContactSuccess(result));\r\n  // } catch (error) {\r\n  //   dispatch(contactsActions.fetchContactError(error));\r\n  // }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(contactsActions.deleteContactRequest());\r\n\r\n  axios.delete(`/contacts/${id}`).then(() => {\r\n    return dispatch(contactsActions.deleteContactSuccess(id));\r\n  });\r\n\r\n  // try {\r\n  //   await APIDeleteContacts(id);\r\n  //   dispatch(contactsActions.deleteContactSuccess(id));\r\n  // } catch (error) {\r\n  //   dispatch(contactsActions.deleteContactError(error));\r\n  // }\r\n};\r\n\r\nconst contactsOperations = {\r\n  fetchContact,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n\r\nexport default contactsOperations;\r\n","import React, { useState } from 'react';\r\nimport s from './SubmitForm.module.css';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport contactsActions from '../../redux/contacts-actions';\r\nimport { getContacts } from 'redux/contacts-selector';\r\nimport notify from 'helpers/Toast';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport contactsOperations from 'redux/contacts-operations';\r\n\r\nfunction SubmitForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [id, setId] = useState('');\r\n  const uniqeID = shortid();\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContacts);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value, id } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n\r\n    setId(id);\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (\r\n      contacts.find(\r\n        contact => contact.name.toLowerCase() === name.toLocaleLowerCase(),\r\n      )\r\n    ) {\r\n      notify(name);\r\n      return;\r\n    }\r\n\r\n    //! Чекни тут\r\n    dispatch(contactsOperations.addContact({ name, number }));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={s.Div}>\r\n        <form className={s.Form} onSubmit={handleSubmit}>\r\n          <label className={s.Label} htmlFor={uniqeID}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              className={s.Input}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              value={name}\r\n              onChange={handleInputChange}\r\n              id={shortid()}\r\n            />\r\n          </label>\r\n          <label className={s.Label}>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              className={s.Input}\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={handleInputChange}\r\n              value={number}\r\n              id={shortid()}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className={s.Button}>\r\n            Add to contacts\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SubmitForm;\r\n","import React, { useEffect } from 'react';\r\nimport style from './ContactList.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getVisibleContacts } from 'redux/contacts-selector';\r\nimport contactsOperations from 'redux/contacts-operations';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const deleteContact = id => dispatch(contactsOperations.deleteContact(id));\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContact());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={style.Contacts__container}>\r\n      <ul className={style.Contact__list}>\r\n        {contacts.map(contact => {\r\n          return (\r\n            <li key={contact.id} className={style.Contact__item}>\r\n              {contact.name} : {contact.number}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  deleteContact(contact.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport style from './Filter.module.css';\r\nimport contactsActions from '../../redux/contacts-actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFilter } from 'redux/contacts-selector';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={style.Label}>\r\n      <p className={style.LabelText}>Filter:</p>{' '}\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\r\n        className={style.Input}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","//* Service\r\nimport React, { useState } from 'react';\r\nimport notify from 'helpers/Toast';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport '../index.css';\r\nimport useLocalStorage from 'Hooks/useLocalStorage';\r\n//* Components\r\nimport Container from './Container';\r\nimport SubmitForm from './SubmitForm';\r\nimport ContactList from './ContactList';\r\nimport Filter from './Filter';\r\n\r\nfunction App() {\r\n  // const [contacts, setContacts] = useLocalStorage('contacts', '');\r\n  // const [filter, setFilter] = useState('');\r\n\r\n  // const AddContactOnSubmit = newContact => {\r\n  //   console.log(contacts);\r\n\r\n  //   if (\r\n  //     contacts.find(\r\n  //       contact => contact.name.toLowerCase() === newContact.name.toLowerCase(),\r\n  //     )\r\n  //   ) {\r\n  //     notify(newContact.name);\r\n  //     return;\r\n  //   }\r\n\r\n  //   setContacts([newContact, ...contacts]);\r\n  // };\r\n\r\n  // const deleteContact = data => {\r\n  //   setContacts(contacts.filter(contact => contact.id !== data));\r\n  //   // this.setState(prevState => ({\r\n  //   //   contacts: prevState.contacts.filter(contact => contact.id !== data),\r\n  //   // }));\r\n  // };\r\n\r\n  // const onFilter = evt => {\r\n  //   setFilter(evt.target.value);\r\n  // };\r\n\r\n  // const getVisibleContacts = () => {\r\n  //   const normalizedFilter = filter.toLowerCase();\r\n\r\n  //   return contacts.filter(({ name }) =>\r\n  //     name.toLowerCase().includes(normalizedFilter),\r\n  //   );\r\n  // };\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <SubmitForm />\r\n      <h1>Contacts</h1>\r\n      <Filter />\r\n      <ContactList />\r\n      <ToastContainer />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/contacts-store';\nimport './index.css';\nimport App from './components/App';\nimport 'modern-normalize/modern-normalize.css';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={<p>loading...</p>} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}